// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 effective-4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name CubiCapture
import ARKit
import AVFoundation
import CoreGraphics
import CoreLocation
import CoreMotion
@_exported import CubiCapture
import Foundation
import SceneKit
import Speech
import Swift
import UIKit
import VideoToolbox
import ZIPFoundation
import Zip
@available(iOS 13.0, *)
extension CCCapture : ARKit.ARSCNViewDelegate {
  @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, nodeFor anchor: ARKit.ARAnchor) -> SceneKit.SCNNode?
  @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, didUpdate node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
}
@available(iOS 13.0, *)
extension CaptureOptions : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class ZipUtilities {
  public enum Error : Swift.Error {
    case zippingError(message: Swift.String)
    case invalidEOCDR
    case noFilesToZip
    case fileNotOnDisk(fileName: Swift.String)
    case sizeUnknown(fileName: Swift.String)
    case wrongSize(fileName: Swift.String)
    case numberOfFilesMismatched(inZip: Swift.Int, onDisk: Swift.Int)
    case unknown
  }
  public static func validateZip(_ zipUrl: Foundation.URL) -> CubiCapture.ZipUtilities.Error?
  public static func reZip(_ zipUrl: Foundation.URL) -> Swift.Result<Foundation.URL, CubiCapture.ZipUtilities.Error>
  @objc deinit
}
@available(iOS 13.0, *)
extension ZipUtilities.Error : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13.0, *)
extension CCCapture : ARKit.ARSessionDelegate {
  @objc dynamic public func session(_ session: ARKit.ARSession, didUpdate frame: ARKit.ARFrame)
  @objc dynamic public func session(_ session: ARKit.ARSession, cameraDidChangeTrackingState camera: ARKit.ARCamera)
}
extension UIDevice {
  public static let modelName: Swift.String
  public static var isLowEndDevice: Swift.Bool {
    get
  }
  public static let cornerRadius: CoreGraphics.CGFloat
}
@available(iOS 13.0, *)
public protocol CCCaptureDelegate : AnyObject {
  func processReadyDelegationFunc(_ controller: CubiCapture.CCCapture)
  func dataZippedDelegationFunc(_ controller: CubiCapture.CCCapture)
  func zippedDataLocation(_ controller: CubiCapture.CCCapture, location: Foundation.URL)
  func scanTrackingFailed(_ controller: CubiCapture.CCCapture)
  func messenger(_ controller: CubiCapture.CCCapture, errorCode: Swift.Int, message: Swift.String)
}
@available(iOS 13.0, *)
public struct CaptureOptions : Swift.OptionSet, Swift.CaseIterable {
  public init(rawValue: Swift.Int)
  public let rawValue: Swift.Int
  public static let speechRecognition: CubiCapture.CaptureOptions
  public static let meshVisualisation: CubiCapture.CaptureOptions
  public static let backgroundResume: CubiCapture.CaptureOptions
  public static let azimuth: CubiCapture.CaptureOptions
  public static let storageWarnings: CubiCapture.CaptureOptions
  public static let allCases: [CubiCapture.CaptureOptions]
  public typealias AllCases = [CubiCapture.CaptureOptions]
  public typealias ArrayLiteralElement = CubiCapture.CaptureOptions
  public typealias Element = CubiCapture.CaptureOptions
  public typealias RawValue = Swift.Int
}
@objc @_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class CCCapture : UIKit.UIViewController {
  weak public var delegateCapture: CubiCapture.CCCaptureDelegate?
  public var options: CubiCapture.CaptureOptions
  public var fileName: Swift.String
  public var number: Swift.String
  public var postCode: Swift.String
  public var city: Swift.String
  public var state: Swift.String
  public var country: Swift.String
  public var suite: Swift.String
  @available(*, deprecated, message: "CCCapture is an UIViewController instead of calling setView you should present CCCapture in your view controller.")
  public func setView(sceneToController: UIKit.UIViewController)
  public func availableScanMinutes() -> Swift.Int?
  @objc dynamic public init()
  @objc override dynamic public var preferredScreenEdgesDeferringSystemGestures: UIKit.UIRectEdge {
    @objc get
  }
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  public func endCaptureSession()
  public func removeScan()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
