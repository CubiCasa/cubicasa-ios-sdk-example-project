// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CubiCapture
import ARKit
import AVFoundation
import Accelerate
import CoreGraphics
import CoreImage
import CoreLocation
import CoreMotion
import CoreVideo
@_exported import CubiCapture
import DeveloperToolsSupport
import Foundation
import MetalKit
import MetalPerformanceShaders
import SceneKit
import Speech
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension UIKit.UIView {
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  @_Concurrency.MainActor(unsafe) public class func animate(withDuration duration: Foundation.TimeInterval, delay: Foundation.TimeInterval, options: UIKit.UIView.AnimationOptions = [], animations: @escaping () -> Swift.Void) async -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  @_Concurrency.MainActor(unsafe) public class func animate(withDuration duration: Foundation.TimeInterval, animations: @escaping () -> Swift.Void) async -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  @_Concurrency.MainActor(unsafe) public class func animate(withDuration duration: Foundation.TimeInterval, delay: Foundation.TimeInterval, usingSpringWithDamping dampingRatio: CoreFoundation.CGFloat, initialSpringVelocity velocity: CoreFoundation.CGFloat, options: UIKit.UIView.AnimationOptions = [], animations: @escaping () -> Swift.Void) async -> Swift.Bool
  #endif
}
public struct ScanningFeatures : Swift.OptionSet, Swift.CaseIterable {
  public init(rawValue: Swift.Int)
  public let rawValue: Swift.Int
  public static let lidar: CubiCapture.ScanningFeatures
  public static let allCases: [CubiCapture.ScanningFeatures]
  public typealias AllCases = [CubiCapture.ScanningFeatures]
  public typealias ArrayLiteralElement = CubiCapture.ScanningFeatures
  public typealias Element = CubiCapture.ScanningFeatures
  public typealias RawValue = Swift.Int
}
extension CubiCapture.ScanningFeatures : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum PhotoCapturerError : Swift.Error {
  case notPrepared
  case rotator
  case imageCompress
  case fileWrite
  case fileMove
  case generic
  public static func == (a: CubiCapture.PhotoCapturerError, b: CubiCapture.PhotoCapturerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ScanHostViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public static let requiredOrientation: UIKit.UIInterfaceOrientation
  @_Concurrency.MainActor(unsafe) public static var completion: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func presentScanner(_ cubiCaptureViewController: UIKit.UIViewController, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum CCPropertyType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case singleUnitResidential, townhouse, apartment, other
  public init(from decoder: any Swift.Decoder) throws
  public static func from(_ value: Swift.String) -> CubiCapture.CCPropertyType
  public init?(rawValue: Swift.String)
  public typealias AllCases = [CubiCapture.CCPropertyType]
  public typealias RawValue = Swift.String
  public static var allCases: [CubiCapture.CCPropertyType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class ZipUtilities {
  public static func validateZip(_ zipUrl: Foundation.URL) -> (any Swift.Error)?
  #if compiler(>=5.3) && $AsyncAwait
  public static func reZip(_ zipUrl: Foundation.URL, progressHandler: ((Swift.Double) -> Swift.Void)?) async -> Swift.Result<Foundation.URL, CubiCapture.ZippingError>
  #endif
  @available(*, deprecated, message: "Use reZip() async version instead")
  public static func reZip(_ zipUrl: Foundation.URL, progressHandler: ((Swift.Double) -> Swift.Void)?, completionHandler: @escaping (Swift.Result<Foundation.URL, CubiCapture.ZippingError>) -> Swift.Void)
  @objc deinit
}
extension CubiCapture.CCCapture : ARKit.ARSessionDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func session(_ session: ARKit.ARSession, didUpdate frame: ARKit.ARFrame)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func session(_ session: ARKit.ARSession, cameraDidChangeTrackingState camera: ARKit.ARCamera)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func sessionShouldAttemptRelocalization(_ session: ARKit.ARSession) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func sessionWasInterrupted(_ session: ARKit.ARSession)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func sessionInterruptionEnded(_ session: ARKit.ARSession)
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let isTablet: Swift.Bool
  nonisolated public static let modelName: Swift.String
  nonisolated public static let isLowEndDevice: Swift.Bool
  nonisolated public static let canUseHEVC: Swift.Bool
  @_Concurrency.MainActor(unsafe) public static let cornerRadius: CoreFoundation.CGFloat
}
public enum ZippingError : Swift.Error {
  case archivingFailed(message: Swift.String)
  case invalidEOCDR
  case noFilesToZip
  case fileNotOnDisk(fileName: Swift.String)
  case sizeUnknown(fileName: Swift.String)
  case wrongSize(fileName: Swift.String)
  case numberOfFilesMismatched(inZip: Swift.Int, onDisk: Swift.Int)
  case unknown
}
extension CubiCapture.ZippingError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension UIKit.UIImage {
  public func resize(to desiredSize: CoreFoundation.CGSize) -> UIKit.UIImage
  public func resize(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat) -> UIKit.UIImage
}
public struct CaptureOptions : Swift.OptionSet, Swift.CaseIterable {
  public init(rawValue: Swift.Int)
  public let rawValue: Swift.Int
  public static let meshVisualisation: CubiCapture.CaptureOptions
  public static let backgroundResume: CubiCapture.CaptureOptions
  public static let azimuth: CubiCapture.CaptureOptions
  public static let storageWarnings: CubiCapture.CaptureOptions
  public static let planeVisualisation: CubiCapture.CaptureOptions
  public static let photoCapturing: CubiCapture.CaptureOptions
  public static let allCases: [CubiCapture.CaptureOptions]
  public typealias AllCases = [CubiCapture.CaptureOptions]
  public typealias ArrayLiteralElement = CubiCapture.CaptureOptions
  public typealias Element = CubiCapture.CaptureOptions
  public typealias RawValue = Swift.Int
}
extension CubiCapture.CaptureOptions : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CCScanPlaybackViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public init(projectLocation: Foundation.URL) throws
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
}
public protocol CCCaptureDelegate : AnyObject {
  func processReadyDelegationFunc(_ controller: CubiCapture.CCCapture)
  func dataZippedDelegationFunc(_ controller: CubiCapture.CCCapture)
  func zippedDataLocation(_ controller: CubiCapture.CCCapture, location: Foundation.URL)
  func scanTrackingFailed(_ controller: CubiCapture.CCCapture)
  func messenger(_ controller: CubiCapture.CCCapture, errorCode: Swift.Int, message: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CCCapture : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public static var isSupportedOnDevice: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var delegateCapture: (any CubiCapture.CCCaptureDelegate)?
  @_Concurrency.MainActor(unsafe) public var options: CubiCapture.CaptureOptions
  @_Concurrency.MainActor(unsafe) public var features: CubiCapture.ScanningFeatures
  @_Concurrency.MainActor(unsafe) public var fileName: Swift.String
  @_Concurrency.MainActor(unsafe) public var number: Swift.String
  @_Concurrency.MainActor(unsafe) public var postCode: Swift.String
  @_Concurrency.MainActor(unsafe) public var city: Swift.String
  @_Concurrency.MainActor(unsafe) public var state: Swift.String
  @_Concurrency.MainActor(unsafe) public var country: Swift.String
  @_Concurrency.MainActor(unsafe) public var suite: Swift.String
  @_Concurrency.MainActor(unsafe) public var propertyType: CubiCapture.CCPropertyType
  @_Concurrency.MainActor(unsafe) public init(with propType: CubiCapture.CCPropertyType, usesRawDepth: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func show(presenter: UIKit.UIViewController?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredScreenEdgesDeferringSystemGestures: UIKit.UIRectEdge {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func removeScan()
  @_Concurrency.MainActor(unsafe) public func availableScanMinutes() -> Swift.Int?
  @available(swift, obsoleted: 1.0, message: "CCCapture is an UIViewController instead of calling setView you should present CCCapture in your view controller.")
  @_Concurrency.MainActor(unsafe) public func setView(sceneToController: UIKit.UIViewController)
  @available(*, deprecated, message: "It is no longed necessary to call endCaptureSession")
  @_Concurrency.MainActor(unsafe) public func endCaptureSession()
  @objc deinit
}
extension CubiCapture.PhotoCapturerError : Swift.Equatable {}
extension CubiCapture.PhotoCapturerError : Swift.Hashable {}
extension CubiCapture.CCPropertyType : Swift.Equatable {}
extension CubiCapture.CCPropertyType : Swift.Hashable {}
extension CubiCapture.CCPropertyType : Swift.RawRepresentable {}
